<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>org.aerogear</groupId>
  <artifactId>mobile-developer-console-ui</artifactId>
  <version>0.1.0</version>
  <packaging>pom</packaging>
  <name>Mobile Developer Console UI</name>

  <properties>

    <!-- ============================= -->
    <!-- General fixed values settings -->
    <!-- ============================= -->

    <!-- General settings -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.target>1.6</maven.compiler.target>
    <maven.compiler.source>1.6</maven.compiler.source>

    <!-- Version of Maven plugins -->
    <version.maven-antrun-plugin>1.8</version.maven-antrun-plugin>
    <version.maven-clean-plugin>2.5</version.maven-clean-plugin>
    <version.maven-assembly-plugin>2.5</version.maven-assembly-plugin>
    <version.maven-enforcer-plugin>1.4</version.maven-enforcer-plugin>

    <!-- Version of Ant dependencies -->
    <version.ant-nodeps>1.8.1</version.ant-nodeps>
    <version.ant-contrib>20020829</version.ant-contrib>

    <!-- Version of frontend-maven-plugin -->
    <version.frontend-maven-plugin>1.6</version.frontend-maven-plugin>

    <!-- Version of Node to install -->
    <version.nodeVersion>v8.15.0</version.nodeVersion>

  </properties>

  <!--
    Typical workflow of a build (including all the steps):
      - maven-clean-plugin: clean all cached folders ([node/**, node_modules/**, node_tmp/**, .tmp/**, dist/**])
      - maven-enforcer-plugin: check that ${project.basedir}/node does not already exist
      - frontend-maven-plugin: download and install Node.JS and NPM
      - frontend-maven-plugin: npm install
      - frontend-maven-plugin: npm run build
      - maven-antrun-plugin: extract and rename tar.gz in dist folder, replace version in package.json with semver ${project.version},
      - maven-assembly-plugin: assembles the tarball
  -->

  <profiles>

    <!-- =================================================================================================== -->
    <!-- Checks that node folder does not already exist or its exclusion in assembly file would cause damage -->
    <!-- =================================================================================================== -->
    <profile>
      <id>node-folder-check</id>
      <activation>
        <property>
          <name>node.folder.check</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <version>${version.maven-enforcer-plugin}</version>
            <executions>
              <execution>
                <id>enforce-dont-exist</id>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <rules>
                    <requireFilesDontExist>
                      <files>
                        <file>${project.basedir}/node</file>
                      </files>
                    </requireFilesDontExist>
                  </rules>
                  <fail>true</fail>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <plugins>
      <!-- =================================================================== -->
      <!-- Clear all cached NPM bits to make completely fresh build -->
      <!-- =================================================================== -->
      <plugin>
        <artifactId>maven-clean-plugin</artifactId>
        <version>${version.maven-clean-plugin}</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>./</directory>
              <includes>
                <include>node/**</include>
                <include>node_modules/**</include>
                <include>node_tmp/**</include>
                <include>.tmp/**</include>
                <include>dist/**</include>
                <include>build/**</include>
                <include>npm-cache/**</include>
              </includes>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!-- =============================================================================================================== -->
      <!--
        This step is where the heart of Node build and processing takes place. The following steps are executed:
            * Download Node.js and NPM using the frontend-maven-plugin
            * npm install
            * npm run build
      -->
      <!-- =============================================================================================================== -->
      <plugin>
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
        <version>${version.frontend-maven-plugin}</version>

        <configuration>
          <workingDirectory>./</workingDirectory>
          <environmentVariables>
            <SASS_BINARY_PATH>${project.basedir}/node_modules/node-sass/build/Release/binding.node</SASS_BINARY_PATH>
            <npm_config_dist_url>${nodeDownloadRoot}</npm_config_dist_url>
          </environmentVariables>
        </configuration>

        <executions>
          <execution>
            <id>install_node_and_npm</id>
            <goals>
              <goal>install-node-and-npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <nodeVersion>${version.nodeVersion}</nodeVersion>
            </configuration>
          </execution>

          <execution>
            <id>npm-ci</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>install --cache npm-cache</arguments>
            </configuration>
          </execution>

          <execution>
            <id>npm-run-build</id>
            <goals>
              <goal>npm</goal>
            </goals>
            <phase>generate-resources</phase>
            <configuration>
              <arguments>run build</arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- ======================================================================================================================= -->
      <!-- After the execution of the build command in the previous section, which has built a tar.gz file in the dist folder, do: -->
      <!--  * get the project.version (could be changed by PME) and make a semver compliant version                                -->
      <!--  * rename the tar.gz extracted folder in a more redhat compliant one                                                    -->
      <!--  * create a VERSION.TXT file with the version calculated                                                                -->
      <!--  * replace the version calculated also in the package.json                                                              -->
      <!--  * let the next assembly plugin recreate the package (and filter out some unnecessary files)                            -->
      <!-- ======================================================================================================================= -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${version.maven-antrun-plugin}</version>
        <executions>
          <execution>
            <id>extract-tar_gz</id>
            <phase>prepare-package</phase>
            <configuration>
              <!-- Makes properties created in Ant available to Maven (required here for assembly file) -->
              <exportAntProperties>true</exportAntProperties>
              <target>
                <!-- Required for the namespace resolution of 'if' and 'then' tasks -->
                <taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="maven.plugin.classpath"></taskdef>

                <!-- If project.version already contains .redhat-N -->
                <!-- Modify ${project.version} from .redhat- to -redhat- for NPM semver compliance (for publishing) -->
                <loadresource property="module.semversion">
                  <propertyresource name="project.version"></propertyresource>
                  <filterchain>
                    <tokenfilter>
                      <replacestring from=".redhat-" to="-redhat-"></replacestring>
                    </tokenfilter>
                  </filterchain>
                </loadresource>
                <echo message="Generated semversion: ${module.semversion}"></echo>

                <property name="module.semver" value="${module.semversion}"></property>
                <echo message="Generated semver: ${module.semver}"></echo>

                <!-- Replacing versions in files -->
                <echo file="${project.basedir}/build/VERSION.txt" append="false" message="${module.semver}"></echo>

                <echo message="Deleting /builddir/.m2/repository/com/github/eirslett/node/"></echo>
                <delete dir="/builddir/.m2/repository/com/github/eirslett/node/" />
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>${version.ant-contrib}</version>
            <exclusions>
              <exclusion>
                <groupId>ant</groupId>
                <artifactId>ant</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
          <dependency>
            <groupId>org.apache.ant</groupId>
            <artifactId>ant-nodeps</artifactId>
            <version>${version.ant-nodeps}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- ======================================================================================================== -->
      <!-- This execution takes the unpacked module inside the dist folder and reassembles it, with some exclusions -->
      <!-- ======================================================================================================== -->
      <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>${version.maven-assembly-plugin}</version>
        <executions>
          <execution>
            <id>distribution</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <descriptors>
                <descriptor>assembly.xml</descriptor>
              </descriptors>
              <finalName>${project.artifactId}-${module.semver}</finalName>
              <appendAssemblyId>false</appendAssemblyId>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
